Questões - Assumindo uma matriz tridimensional de 100x100x100 que cada
posição tem um valor entre -100 e 100.

QUESTÃO 01 - ALGORITMO GULOSO

Utilizando a abordagem de algoritmo guloso, faça um programa que colete os valores
a partir de uma coordenada inicial dada (x1, y1, z1) até uma coordenada final (xf, yf,zf), sendo que cada posição pode ser coletada somente uma vez (não pode coletar 2 vezes a mesma posição).Como regra, o número máximo de valores coletados é 300, sendo que caso atinja esse valor de itens coletados deve-se parar a coleta e informar o valor coletado. Outra situação de p. arada é quando a coordenada final é encontrada, independente
de quantidade de itens coletados.

QUESTÃO 02 - ALGORITMO BACKTRACKING

Utilizando a abordagem de algoritmo backtracking, faça um programa que colete os
valores a partir de uma coordenada inicial dada (x1, y1, z1) até uma coordenada final
(xf, yf, zf), sendo que cada posição pode ser coletada somente uma vez (não pode
coletar 2 vezes a mesma posição) e no máximo 300 coletas. Determinar o maior valor
possível.

CUBO TRIDIMENSIONAL

Este é um código que realiza uma busca em um cubo tridimensional, gerando um cubo de tamanho 10x10x10
com números aleatórios, e escolhendo aleatoriamente uma posição inicial e final. O objetivo é encontrar um
caminho que maximize a soma dos valores do cubo e chegue à posição final. O algoritmo verifica qual é a
maior vizinhança a cada passo, atualiza a posição para a coordenada com o maior valor e continua até chegar
à posição final ou até fazer 300 passos.

EXPLICANDO AS FUNÇÕES - ETAPA 01
A função 'validaNum' é usada para verificar se a coordenada
está dentro dos limites do cubo. Se a coordenada for menor
que 0, ela é ajustada para 0. Se for maior que o tamanho do
cubo menos 1, é ajustada para o tamanho do cubo menos 1

EXPLICANDO AS FUNÇÕES - ETAPA 02
A função 'verificaMaior' recebe as coordenadas da posição atual (coord1, coord2, coord3) e verifica a vizinhança ao redor dessa posição. Ele inicializa 'Maior_Redor_Valor' com um valor muito baixo (menor -1) e percorre as coordenadas vizinhas usando três loops for aninhados.

EXPLICANDO AS FUNÇÕES - ETAPA 03
Ele chama a função validaNum para garantir que a coordenada esteja dentro dos limites do cubo e compara o valor nessa coordenada com 'Maior_Redor_Valor'. Se o valor for maior que 'Maior_Redor_Valor', atualiza'Maior_Redor_Valor' e armazena a coordenada em 'Maior_Redor_Posicao'. E no final, a função atualiza as variáveis globais 'somatoria' e 'posicao' com os valores da maior vizinhança encontrada.

EXPLICANDO AS FUNÇÕES - ETAPA 04
O código usa um loop 'while True' para
executar o algoritmo. Ele chama a função
'verificaMaior' na posição atual e atualiza
a variável 'passos'. Se passos atingir 300
ou se a posição atual for igual à posição
final, o loop é encerrado

EXPLICANDO AS FUNÇÕES - ETAPA 05
Por fim, o código imprime a posição inicial,
o número de passos realizados, a posição
em que o algoritmo encerrou, a posição
final e a somatória dos valores coletados.
Ele também escreve essas informações em
um arquivo de texto chamado "Passos.txt"